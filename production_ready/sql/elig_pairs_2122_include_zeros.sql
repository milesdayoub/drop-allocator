-- Include score=0 edges (no floor), with deterministic tie-breaks
-- Drop 2122 | Window: 2025-08-14 15:00:00 → 2025-08-15 07:00:00 UTC

WITH
  toDateTime('2025-08-14 15:00:00','UTC') AS win_start,
  toDateTime('2025-08-15 07:00:00','UTC') AS win_end,

  /* Per-type trims for non-targeted contracts (set 30 or 1000 as you wish) */
  1000 AS top_spon,
  1000 AS top_unspon,

  /* Under-utilized sponsored contract addresses (from your script) */
  arrayDistinct(['0x00000000000000000000000000000000000598','0x00000000000000000000000000000000000597','0x00000000000000000000000000000000000600','0x00000000000000000000000000000000000599','0x00000000000000000000000000000000000618','0x00000000000000000000000000000000000621','0x00000000000000000000000000000000000620','0x00000000000000000000000000000000000619','0x00000000000000000000000000000000000616','0x00000000000000000000000000000000000614','0x00000000000000000000000000000000000606','0x00000000000000000000000000000000000609','0x00000000000000000000000000000000000613','0x00000000000000000000000000000000000610'
  ]) AS underutilized_spon,

  /* All contract addresses with cap_face > 0 for Drop 2122 (sync with your caps CSV) */
  arrayDistinct([
    '0x00000000000000000000000000000000000134', '0x00000000000000000000000000000000000136', '0x00000000000000000000000000000000000138', '0x00000000000000000000000000000000000142', '0x00000000000000000000000000000000000146', '0x00000000000000000000000000000000000148',
    '0x00000000000000000000000000000000000164', '0x00000000000000000000000000000000000173', '0x00000000000000000000000000000000000179', '0x00000000000000000000000000000000000180', '0x00000000000000000000000000000000000184', '0x00000000000000000000000000000000000213',
    '0x00000000000000000000000000000000000216', '0x00000000000000000000000000000000000219', '0x00000000000000000000000000000000000229', '0x00000000000000000000000000000000000230', '0x00000000000000000000000000000000000234', '0x00000000000000000000000000000000000263',
    '0x00000000000000000000000000000000000265', '0x00000000000000000000000000000000000303', '0x00000000000000000000000000000000000310', '0x00000000000000000000000000000000000311', '0x00000000000000000000000000000000000320', '0x00000000000000000000000000000000000322',
    '0x00000000000000000000000000000000000324', '0x00000000000000000000000000000000000328', '0x00000000000000000000000000000000000332', '0x00000000000000000000000000000000000337', '0x00000000000000000000000000000000000349', '0x00000000000000000000000000000000000350',
    '0x00000000000000000000000000000000000414', '0x00000000000000000000000000000000000418', '0x00000000000000000000000000000000000419', '0x00000000000000000000000000000000000444', '0x00000000000000000000000000000000000516', '0x00000000000000000000000000000000000517',
    '0x00000000000000000000000000000000000518', '0x00000000000000000000000000000000000519', '0x00000000000000000000000000000000000520', '0x00000000000000000000000000000000000521', '0x00000000000000000000000000000000000522', '0x00000000000000000000000000000000000523',
    '0x00000000000000000000000000000000000524', '0x00000000000000000000000000000000000525', '0x00000000000000000000000000000000000530', '0x00000000000000000000000000000000000531', '0x00000000000000000000000000000000000532', '0x00000000000000000000000000000000000533',
    '0x00000000000000000000000000000000000534', '0x00000000000000000000000000000000000535', '0x00000000000000000000000000000000000536', '0x00000000000000000000000000000000000537', '0x00000000000000000000000000000000000540', '0x00000000000000000000000000000000000542',
    '0x00000000000000000000000000000000000543', '0x00000000000000000000000000000000000547', '0x00000000000000000000000000000000000550', '0x00000000000000000000000000000000000551', '0x00000000000000000000000000000000000557', '0x00000000000000000000000000000000000558',
    '0x00000000000000000000000000000000000559', '0x00000000000000000000000000000000000560', '0x00000000000000000000000000000000000561', '0x00000000000000000000000000000000000564', '0x00000000000000000000000000000000000566', '0x00000000000000000000000000000000000569',
    '0x00000000000000000000000000000000000570', '0x00000000000000000000000000000000000572', '0x00000000000000000000000000000000000580', '0x00000000000000000000000000000000000581', '0x00000000000000000000000000000000000583', '0x00000000000000000000000000000000000596',
    '0x00000000000000000000000000000000000597', '0x00000000000000000000000000000000000598', '0x00000000000000000000000000000000000599', '0x00000000000000000000000000000000000600', '0x00000000000000000000000000000000000601', '0x00000000000000000000000000000000000602',
    '0x00000000000000000000000000000000000603', '0x00000000000000000000000000000000000604', '0x00000000000000000000000000000000000605', '0x00000000000000000000000000000000000606', '0x00000000000000000000000000000000000608', '0x00000000000000000000000000000000000609',
    '0x00000000000000000000000000000000000610', '0x00000000000000000000000000000000000611', '0x00000000000000000000000000000000000612', '0x00000000000000000000000000000000000613', '0x00000000000000000000000000000000000614', '0x00000000000000000000000000000000000616',
    '0x00000000000000000000000000000000000617', '0x00000000000000000000000000000000000618', '0x00000000000000000000000000000000000619', '0x00000000000000000000000000000000000620', '0x00000000000000000000000000000000000621', '0x00000000000000000000000000000000000622',
    '0x00000000000000000000000000000000000623', '0x434f8d1a3cc53f20346b47ec6fe0926f217d38ec', '0xa8c2bef6882dce02f7005a76fbdd4bcf90cd8cf6', '0xdce663ebfced815af8ceb3a7b1cf83f735f6d9fa', '0xecdebb57e01e2ea2969e48594d75df4e62afc9f4', '0xf1a44074b567f94749e0bf7771468a7c708dfb8e'
  ]) AS cap_addrs

, pairs AS (   -- Eligible (user, contract) pairs in window, restricted to Drop contracts
  SELECT
    uce.user_id,
    c.address       AS contract_address,
    c.brand_id      AS brand_id,
    c.is_sponsored  AS is_sponsored
  FROM public_user_contract_eligibility AS uce
  INNER JOIN public_contract AS c
          ON c.address = uce.contract_address
  WHERE uce.is_eligible = 1
    AND c.address IN cap_addrs
    AND c.is_drop = 1
    AND c.is_onboarding = 0
    AND c.start_datetime <= win_end
    AND c.end_datetime   >= win_start
),

brands_needed AS (SELECT DISTINCT brand_id FROM pairs),
users_needed  AS (SELECT DISTINCT user_id  FROM pairs),

-- Recommender scores only for the user/brand keys we need
ubr_small AS (
  SELECT ubr.user_id, ubr.brand_id, ubr.score
  FROM public_user_brand_recommendation AS ubr
  INNER JOIN brands_needed  bn USING (brand_id)
  INNER JOIN users_needed   un USING (user_id)
)

SELECT user_id, contract_address, score
FROM
(
  SELECT
    p.user_id,
    p.contract_address,
    COALESCE(ubr.score, 0) AS score,   -- include true zeros
    p.is_sponsored,
    -- Deterministic tie-break so zero-score edges don’t bias to lexicographic addresses:
    row_number() OVER (
      PARTITION BY p.user_id, p.is_sponsored
      ORDER BY
        COALESCE(ubr.score, 0) DESC,
        cityHash64(concat(toString(p.user_id), ':', p.contract_address))  -- stable pseudo-random
    ) AS rn
  FROM pairs AS p
  LEFT JOIN ubr_small AS ubr
    ON ubr.user_id = p.user_id AND ubr.brand_id = p.brand_id
)
WHERE
      -- For under-utilized sponsored contracts: include ALL edges (scores may be zero), no per-user trim
      (is_sponsored = 1 AND contract_address IN underutilized_spon)
   OR -- For other sponsored: per-user top-N
      (is_sponsored = 1 AND rn <= top_spon)
   OR -- For unsponsored: per-user top-N
      (is_sponsored = 0 AND rn <= top_unspon)
FORMAT CSVWithNames
SETTINGS
  join_algorithm = 'grace_hash',
  max_bytes_in_join = 2000000000,
  max_bytes_before_external_sort = 2000000000,
  max_bytes_before_external_group_by = 2000000000;
